// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyStock.Persistence.Database;

#nullable disable

namespace MyStock.Persistence.Migrations
{
    [DbContext(typeof(MyStockContext))]
    partial class MyStockContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyStock.Domain.Document", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Document", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Document");
                });

            modelBuilder.Entity("MyStock.Domain.DocumentDetail", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UomGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WarehouseGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("DocumentGuid");

                    b.HasIndex("ProductGuid");

                    b.HasIndex("UomGuid");

                    b.HasIndex("WarehouseGuid");

                    b.ToTable("DocumentDetail", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("DocumentDetail");
                });

            modelBuilder.Entity("MyStock.Domain.Person", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Person", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("MyStock.Domain.Product", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UomGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("CategoryGuid");

                    b.HasIndex("UomGuid");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("MyStock.Domain.ProductCategory", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("ParentGuid");

                    b.ToTable("ProductCategory", (string)null);
                });

            modelBuilder.Entity("MyStock.Domain.ProductStockLevel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MaxQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WarehouseGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("ProductGuid");

                    b.HasIndex("WarehouseGuid");

                    b.ToTable("ProductStockLevel", (string)null);
                });

            modelBuilder.Entity("MyStock.Domain.Uom", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Uom", (string)null);
                });

            modelBuilder.Entity("MyStock.Domain.Warehouse", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Warehouse", (string)null);
                });

            modelBuilder.Entity("MyStock.Domain.Customer", b =>
                {
                    b.HasBaseType("MyStock.Domain.Person");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("MyStock.Domain.Purchase", b =>
                {
                    b.HasBaseType("MyStock.Domain.Document");

                    b.Property<Guid>("VendorGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("VendorGuid");

                    b.HasDiscriminator().HasValue("Purchase");
                });

            modelBuilder.Entity("MyStock.Domain.PurchaseDetail", b =>
                {
                    b.HasBaseType("MyStock.Domain.DocumentDetail");

                    b.HasDiscriminator().HasValue("PurchaseDetail");
                });

            modelBuilder.Entity("MyStock.Domain.Sales", b =>
                {
                    b.HasBaseType("MyStock.Domain.Document");

                    b.Property<Guid>("CustomerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CustomerGuid");

                    b.HasDiscriminator().HasValue("Sales");
                });

            modelBuilder.Entity("MyStock.Domain.SalesDetail", b =>
                {
                    b.HasBaseType("MyStock.Domain.DocumentDetail");

                    b.HasDiscriminator().HasValue("SalesDetail");
                });

            modelBuilder.Entity("MyStock.Domain.User", b =>
                {
                    b.HasBaseType("MyStock.Domain.Person");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("MyStock.Domain.Vendor", b =>
                {
                    b.HasBaseType("MyStock.Domain.Person");

                    b.HasDiscriminator().HasValue("Vendor");
                });

            modelBuilder.Entity("MyStock.Domain.DocumentDetail", b =>
                {
                    b.HasOne("MyStock.Domain.Document", "Document")
                        .WithMany("Details")
                        .HasForeignKey("DocumentGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyStock.Domain.Product", "Product")
                        .WithMany("DocumentDetails")
                        .HasForeignKey("ProductGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyStock.Domain.Uom", "Uom")
                        .WithMany("DocumentDetails")
                        .HasForeignKey("UomGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyStock.Domain.Warehouse", "Warehouse")
                        .WithMany("DocumentDetails")
                        .HasForeignKey("WarehouseGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Product");

                    b.Navigation("Uom");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("MyStock.Domain.Product", b =>
                {
                    b.HasOne("MyStock.Domain.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyStock.Domain.Uom", "Uom")
                        .WithMany("Products")
                        .HasForeignKey("UomGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("MyStock.Domain.ProductCategory", b =>
                {
                    b.HasOne("MyStock.Domain.ProductCategory", "Parent")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MyStock.Domain.ProductStockLevel", b =>
                {
                    b.HasOne("MyStock.Domain.Product", "Product")
                        .WithMany("StockLevels")
                        .HasForeignKey("ProductGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyStock.Domain.Warehouse", "Warehouse")
                        .WithMany("StockLevels")
                        .HasForeignKey("WarehouseGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("MyStock.Domain.Purchase", b =>
                {
                    b.HasOne("MyStock.Domain.Vendor", "Vendor")
                        .WithMany("Purchases")
                        .HasForeignKey("VendorGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("MyStock.Domain.Sales", b =>
                {
                    b.HasOne("MyStock.Domain.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MyStock.Domain.Document", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("MyStock.Domain.Product", b =>
                {
                    b.Navigation("DocumentDetails");

                    b.Navigation("StockLevels");
                });

            modelBuilder.Entity("MyStock.Domain.ProductCategory", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyStock.Domain.Uom", b =>
                {
                    b.Navigation("DocumentDetails");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyStock.Domain.Warehouse", b =>
                {
                    b.Navigation("DocumentDetails");

                    b.Navigation("StockLevels");
                });

            modelBuilder.Entity("MyStock.Domain.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyStock.Domain.Vendor", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
