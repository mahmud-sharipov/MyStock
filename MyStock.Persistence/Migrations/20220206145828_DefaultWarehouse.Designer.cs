// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyStock.Persistence.Database;

#nullable disable

namespace MyStock.Persistence.Migrations
{
    [DbContext(typeof(MyStockContext))]
    [Migration("20220206145828_DefaultWarehouse")]
    partial class DefaultWarehouse
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyStock.Domain.Document", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Document", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Document");
                });

            modelBuilder.Entity("MyStock.Domain.DocumentDetail", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DocumentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UomGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WarehouseGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("DocumentGuid");

                    b.HasIndex("ProductGuid");

                    b.HasIndex("UomGuid");

                    b.HasIndex("WarehouseGuid");

                    b.ToTable("DocumentDetail", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("DocumentDetail");
                });

            modelBuilder.Entity("MyStock.Domain.Person", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Person", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("MyStock.Domain.Product", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UomGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("CategoryGuid");

                    b.HasIndex("UomGuid");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("MyStock.Domain.ProductCategory", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("ParentGuid");

                    b.ToTable("ProductCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Guid = new Guid("195cd36c-28ce-4bf1-ad66-e8100fd75f7a"),
                            Name = "мдф"
                        },
                        new
                        {
                            Guid = new Guid("2a4a7775-8de3-4aa4-804f-6b45024fef20"),
                            Name = "абой"
                        },
                        new
                        {
                            Guid = new Guid("2cd3de67-005d-4584-a42b-ca66a32b504e"),
                            Name = "10м",
                            ParentGuid = new Guid("2a4a7775-8de3-4aa4-804f-6b45024fef20")
                        },
                        new
                        {
                            Guid = new Guid("35e1bbe7-4f78-46b6-a79d-7f636d073511"),
                            Name = "Пластика"
                        },
                        new
                        {
                            Guid = new Guid("37ca6016-94d5-4933-8003-fe8e1bd9e071"),
                            Name = "шпакиловка"
                        },
                        new
                        {
                            Guid = new Guid("40bfe345-30a1-47aa-b2f5-e5ff1fda4779"),
                            Name = "1м",
                            ParentGuid = new Guid("2a4a7775-8de3-4aa4-804f-6b45024fef20")
                        },
                        new
                        {
                            Guid = new Guid("47c1dd90-956f-450b-8061-1548b2da69e0"),
                            Name = "10м кухни",
                            ParentGuid = new Guid("2a4a7775-8de3-4aa4-804f-6b45024fef20")
                        },
                        new
                        {
                            Guid = new Guid("4846f838-78b5-418b-8a51-9fabeb78a2d0"),
                            Name = "10м моюши",
                            ParentGuid = new Guid("2a4a7775-8de3-4aa4-804f-6b45024fef20")
                        },
                        new
                        {
                            Guid = new Guid("4e5cfc6b-a7f5-40d4-944e-cf9a4b9effc0"),
                            Name = "мех"
                        },
                        new
                        {
                            Guid = new Guid("526160dd-71ef-4026-9157-2d6f79db6dec"),
                            Name = "водоемулсия"
                        },
                        new
                        {
                            Guid = new Guid("5d165655-d731-442c-9751-f837f6539af5"),
                            Name = "бочка"
                        },
                        new
                        {
                            Guid = new Guid("5d2e1eeb-a1d2-4429-b8a9-98ab55f2db51"),
                            Name = "вагонка"
                        },
                        new
                        {
                            Guid = new Guid("61cc755a-c7ff-4190-ba62-317e87e4db12"),
                            Name = "1м моюши",
                            ParentGuid = new Guid("2a4a7775-8de3-4aa4-804f-6b45024fef20")
                        },
                        new
                        {
                            Guid = new Guid("7fadc282-475b-4e2e-9b0d-d0d019243e28"),
                            Name = "1м корея",
                            ParentGuid = new Guid("2a4a7775-8de3-4aa4-804f-6b45024fef20")
                        },
                        new
                        {
                            Guid = new Guid("7febd40a-efa2-41fb-8c41-a032c8ff3305"),
                            Name = "Лак "
                        },
                        new
                        {
                            Guid = new Guid("80ce91cb-561c-4687-84db-579fef1e47b9"),
                            Name = "15м",
                            ParentGuid = new Guid("2a4a7775-8de3-4aa4-804f-6b45024fef20")
                        },
                        new
                        {
                            Guid = new Guid("89c3023a-176b-41ef-9c05-9c2a76bb983f"),
                            Name = "река"
                        },
                        new
                        {
                            Guid = new Guid("9de4c36f-e06b-47ff-8f8b-d59509364863"),
                            Name = "гипсокартон"
                        },
                        new
                        {
                            Guid = new Guid("9f424414-f5bc-497d-9d81-703886be19ad"),
                            Name = "краска"
                        },
                        new
                        {
                            Guid = new Guid("a5cb5776-9d9c-4d13-b1d6-a1bfaa631c9d"),
                            Name = "столичниса"
                        },
                        new
                        {
                            Guid = new Guid("a75f1846-cf64-40e8-8c0e-e3550eb83792"),
                            Name = "наличник"
                        },
                        new
                        {
                            Guid = new Guid("abdfa5fe-617d-4e4a-be1a-aa11eef7c8a4"),
                            Name = "10м бумажни",
                            ParentGuid = new Guid("2a4a7775-8de3-4aa4-804f-6b45024fef20")
                        },
                        new
                        {
                            Guid = new Guid("ac7adcde-1bb2-4e0b-ac8d-7e329a5d0fb8"),
                            Name = "дсп"
                        },
                        new
                        {
                            Guid = new Guid("c850e26a-ccb2-4522-842a-fd91379fb606"),
                            Name = "75см моюши",
                            ParentGuid = new Guid("2a4a7775-8de3-4aa4-804f-6b45024fef20")
                        },
                        new
                        {
                            Guid = new Guid("cc6bd67a-77d5-4a82-b1cf-c2818a38579a"),
                            Name = "хархела"
                        },
                        new
                        {
                            Guid = new Guid("d5d42b57-94c0-4a6a-96af-cc9a21353eea"),
                            Name = "тунука"
                        },
                        new
                        {
                            Guid = new Guid("d9ad5558-e4d0-4275-ac40-68c858f80a71"),
                            Name = "25м сафед",
                            ParentGuid = new Guid("2a4a7775-8de3-4aa4-804f-6b45024fef20")
                        },
                        new
                        {
                            Guid = new Guid("e1d60fda-cab0-4d5d-88ee-18350630fd82"),
                            Name = "семент"
                        },
                        new
                        {
                            Guid = new Guid("e3d62479-03df-4501-a49f-083e02ed7d0a"),
                            Name = "кафел"
                        },
                        new
                        {
                            Guid = new Guid("e54d9f66-f8b0-4eb3-858c-ea2519df4559"),
                            Name = "15м моюши",
                            ParentGuid = new Guid("2a4a7775-8de3-4aa4-804f-6b45024fef20")
                        },
                        new
                        {
                            Guid = new Guid("f2ce64d0-81e2-427e-bc3e-3c5722579b21"),
                            Name = "дар"
                        });
                });

            modelBuilder.Entity("MyStock.Domain.ProductStockLevel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MaxQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WarehouseGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Guid");

                    b.HasIndex("ProductGuid");

                    b.HasIndex("WarehouseGuid");

                    b.ToTable("ProductStockLevel", (string)null);
                });

            modelBuilder.Entity("MyStock.Domain.Uom", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Uom", (string)null);

                    b.HasData(
                        new
                        {
                            Guid = new Guid("489996f3-b54e-4d24-bfeb-4b5564a71e21"),
                            Code = "шт",
                            Description = "",
                            Name = "Штук"
                        },
                        new
                        {
                            Guid = new Guid("e62f57ad-2a7a-4dc3-a598-384a3ae71468"),
                            Code = "бтл",
                            Description = "",
                            Name = "Бутылка"
                        },
                        new
                        {
                            Guid = new Guid("92c0077f-a9cc-45f5-ad99-446e66857526"),
                            Code = "Коробка",
                            Description = "",
                            Name = "Коробка"
                        },
                        new
                        {
                            Guid = new Guid("898faa8f-eaf6-4285-84f7-a4c71d7deb86"),
                            Code = "Ящик",
                            Description = "",
                            Name = "Ящик"
                        },
                        new
                        {
                            Guid = new Guid("22153e37-1aac-4892-8bbc-326bd15fc8ee"),
                            Code = "мм2",
                            Description = "",
                            Name = "Квадратный миллиметр"
                        },
                        new
                        {
                            Guid = new Guid("bdf484ae-c91b-4c5e-b896-3b3b245de337"),
                            Code = "см2",
                            Description = "",
                            Name = "Квадратный сантиметр"
                        },
                        new
                        {
                            Guid = new Guid("bf60ce4c-040c-4a9e-b0b1-702df75da78f"),
                            Code = "м2",
                            Description = "",
                            Name = "Квадратный метр"
                        },
                        new
                        {
                            Guid = new Guid("7a13bf75-b849-4e6d-a213-010d7a90caac"),
                            Code = "см",
                            Description = "",
                            Name = "Сантиметр"
                        },
                        new
                        {
                            Guid = new Guid("8c34ff12-83c4-460c-a29e-19dea7c12b8f"),
                            Code = "дм",
                            Description = "",
                            Name = "Дециметр"
                        },
                        new
                        {
                            Guid = new Guid("a393b122-310d-4938-9de2-5d24637cf0bb"),
                            Code = "км",
                            Description = "",
                            Name = "Километр"
                        },
                        new
                        {
                            Guid = new Guid("fe391143-9bc1-4d90-9aae-adfc60d3f480"),
                            Code = "м",
                            Description = "",
                            Name = "Метр"
                        },
                        new
                        {
                            Guid = new Guid("8e467b58-aee7-4bc7-b5b0-1cd3eabead5f"),
                            Code = "мм",
                            Description = "",
                            Name = "Миллиметр"
                        },
                        new
                        {
                            Guid = new Guid("837bb74f-583f-4b49-bea9-ff849501de7f"),
                            Code = "г",
                            Description = "",
                            Name = "Грамм"
                        },
                        new
                        {
                            Guid = new Guid("f76acbc2-6b73-495e-af2d-2e917ee84d38"),
                            Code = "кг",
                            Description = "",
                            Name = "Килограмм"
                        },
                        new
                        {
                            Guid = new Guid("5509ab93-07e9-4a32-8127-d64a5235318e"),
                            Code = "т",
                            Description = "",
                            Name = "Тонна"
                        },
                        new
                        {
                            Guid = new Guid("dbebc585-ddf9-42e0-8792-8ea2f0136a5f"),
                            Code = "см3",
                            Description = "",
                            Name = "Кубический сантиметр"
                        },
                        new
                        {
                            Guid = new Guid("ec787a3a-1650-46ae-a748-a2f544df8a0a"),
                            Code = "дм3",
                            Description = "",
                            Name = "Кубический дециметр"
                        },
                        new
                        {
                            Guid = new Guid("ba6c59ee-c0e4-4f8d-85d1-6d0f82592af9"),
                            Code = "м3",
                            Description = "",
                            Name = "Кубический метр"
                        },
                        new
                        {
                            Guid = new Guid("0ebc974a-791f-4331-a22f-6ab03b96c783"),
                            Code = "мм3",
                            Description = "",
                            Name = "Кубический миллиметр"
                        },
                        new
                        {
                            Guid = new Guid("212582f0-0f41-4c0b-9d88-5d6b16b07ef6"),
                            Code = "л",
                            Description = "",
                            Name = "Литр"
                        },
                        new
                        {
                            Guid = new Guid("bf8766ce-df1b-4037-a7de-b21cb5925ac2"),
                            Code = "мм",
                            Description = "",
                            Name = "Миллилитр"
                        });
                });

            modelBuilder.Entity("MyStock.Domain.Warehouse", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Warehouse", (string)null);

                    b.HasData(
                        new
                        {
                            Guid = new Guid("84657af7-2f27-4efc-8748-d6a9c1bce7ed"),
                            Description = "Склад по умолчанию",
                            Name = "Главний"
                        });
                });

            modelBuilder.Entity("MyStock.Domain.Customer", b =>
                {
                    b.HasBaseType("MyStock.Domain.Person");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("MyStock.Domain.Purchase", b =>
                {
                    b.HasBaseType("MyStock.Domain.Document");

                    b.Property<Guid>("VendorGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("VendorGuid");

                    b.HasDiscriminator().HasValue("Purchase");
                });

            modelBuilder.Entity("MyStock.Domain.PurchaseDetail", b =>
                {
                    b.HasBaseType("MyStock.Domain.DocumentDetail");

                    b.HasDiscriminator().HasValue("PurchaseDetail");
                });

            modelBuilder.Entity("MyStock.Domain.Sales", b =>
                {
                    b.HasBaseType("MyStock.Domain.Document");

                    b.Property<Guid>("CustomerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CustomerGuid");

                    b.HasDiscriminator().HasValue("Sales");
                });

            modelBuilder.Entity("MyStock.Domain.SalesDetail", b =>
                {
                    b.HasBaseType("MyStock.Domain.DocumentDetail");

                    b.HasDiscriminator().HasValue("SalesDetail");
                });

            modelBuilder.Entity("MyStock.Domain.User", b =>
                {
                    b.HasBaseType("MyStock.Domain.Person");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("MyStock.Domain.Vendor", b =>
                {
                    b.HasBaseType("MyStock.Domain.Person");

                    b.HasDiscriminator().HasValue("Vendor");
                });

            modelBuilder.Entity("MyStock.Domain.DocumentDetail", b =>
                {
                    b.HasOne("MyStock.Domain.Document", "Document")
                        .WithMany("Details")
                        .HasForeignKey("DocumentGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyStock.Domain.Product", "Product")
                        .WithMany("DocumentDetails")
                        .HasForeignKey("ProductGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyStock.Domain.Uom", "Uom")
                        .WithMany("DocumentDetails")
                        .HasForeignKey("UomGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyStock.Domain.Warehouse", "Warehouse")
                        .WithMany("DocumentDetails")
                        .HasForeignKey("WarehouseGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Product");

                    b.Navigation("Uom");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("MyStock.Domain.Product", b =>
                {
                    b.HasOne("MyStock.Domain.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyStock.Domain.Uom", "Uom")
                        .WithMany("Products")
                        .HasForeignKey("UomGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Uom");
                });

            modelBuilder.Entity("MyStock.Domain.ProductCategory", b =>
                {
                    b.HasOne("MyStock.Domain.ProductCategory", "Parent")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentGuid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MyStock.Domain.ProductStockLevel", b =>
                {
                    b.HasOne("MyStock.Domain.Product", "Product")
                        .WithMany("StockLevels")
                        .HasForeignKey("ProductGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyStock.Domain.Warehouse", "Warehouse")
                        .WithMany("StockLevels")
                        .HasForeignKey("WarehouseGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("MyStock.Domain.Purchase", b =>
                {
                    b.HasOne("MyStock.Domain.Vendor", "Vendor")
                        .WithMany("Purchases")
                        .HasForeignKey("VendorGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("MyStock.Domain.Sales", b =>
                {
                    b.HasOne("MyStock.Domain.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustomerGuid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MyStock.Domain.Document", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("MyStock.Domain.Product", b =>
                {
                    b.Navigation("DocumentDetails");

                    b.Navigation("StockLevels");
                });

            modelBuilder.Entity("MyStock.Domain.ProductCategory", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyStock.Domain.Uom", b =>
                {
                    b.Navigation("DocumentDetails");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MyStock.Domain.Warehouse", b =>
                {
                    b.Navigation("DocumentDetails");

                    b.Navigation("StockLevels");
                });

            modelBuilder.Entity("MyStock.Domain.Customer", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("MyStock.Domain.Vendor", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
